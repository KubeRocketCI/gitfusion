// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"time"
)

// Defines values for RepositoryVisibility.
const (
	RepositoryVisibilityPrivate RepositoryVisibility = "private"
	RepositoryVisibilityPublic  RepositoryVisibility = "public"
)

// Defines values for RepositoryDetailsVisibility.
const (
	RepositoryDetailsVisibilityPrivate RepositoryDetailsVisibility = "private"
	RepositoryDetailsVisibilityPublic  RepositoryDetailsVisibility = "public"
)

// Error defines model for Error.
type Error struct {
	// Code A short error code representing the type of error
	Code string `json:"code"`

	// Message A human-readable message providing more details about the error
	Message string `json:"message"`
}

// Owner defines model for Owner.
type Owner struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Id        string  `json:"id"`
	Name      string  `json:"name"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	NextPage int `json:"next_page"`
	Page     int `json:"page"`
	PerPage  int `json:"per_page"`
	Total    int `json:"total"`
}

// RepositoriesResponse defines model for RepositoriesResponse.
type RepositoriesResponse struct {
	Pagination   Pagination   `json:"pagination"`
	Repositories []Repository `json:"repositories"`
}

// Repository defines model for Repository.
type Repository struct {
	DefaultBranch *string               `json:"default_branch,omitempty"`
	Description   *string               `json:"description,omitempty"`
	Id            string                `json:"id"`
	Name          string                `json:"name"`
	Owner         *string               `json:"owner,omitempty"`
	Url           *string               `json:"url,omitempty"`
	Visibility    *RepositoryVisibility `json:"visibility,omitempty"`
}

// RepositoryVisibility defines model for Repository.Visibility.
type RepositoryVisibility string

// RepositoryDetails defines model for RepositoryDetails.
type RepositoryDetails struct {
	CreatedAt     *time.Time                   `json:"created_at,omitempty"`
	DefaultBranch *string                      `json:"default_branch,omitempty"`
	Description   *string                      `json:"description,omitempty"`
	ForksCount    *int                         `json:"forks_count,omitempty"`
	HttpUrl       *string                      `json:"http_url,omitempty"`
	Id            string                       `json:"id"`
	Name          string                       `json:"name"`
	Owner         *Owner                       `json:"owner,omitempty"`
	SshUrl        *string                      `json:"ssh_url,omitempty"`
	StarsCount    *int                         `json:"stars_count,omitempty"`
	Url           *string                      `json:"url,omitempty"`
	Visibility    *RepositoryDetailsVisibility `json:"visibility,omitempty"`
}

// RepositoryDetailsVisibility defines model for RepositoryDetails.Visibility.
type RepositoryDetailsVisibility string

// GitServerParam defines model for gitServerParam.
type GitServerParam = string

// OrgParam defines model for orgParam.
type OrgParam = string

// OwnerParam defines model for ownerParam.
type OwnerParam = string

// PageParam defines model for pageParam.
type PageParam = int

// PerPageParam defines model for perPageParam.
type PerPageParam = int

// RepoParam defines model for repoParam.
type RepoParam = string

// ListGitHubRepositoriesParams defines parameters for ListGitHubRepositories.
type ListGitHubRepositoriesParams struct {
	// Page The page number for pagination.
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of items per page for pagination.
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListGitlabRepositoriesParams defines parameters for ListGitlabRepositories.
type ListGitlabRepositoriesParams struct {
	// Page The page number for pagination.
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`

	// PerPage The number of items per page for pagination.
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`
}
