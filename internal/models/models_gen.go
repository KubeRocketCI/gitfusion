// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"time"
)

// Defines values for PipelineVariableVariableType.
const (
	EnvVar PipelineVariableVariableType = "env_var"
	File   PipelineVariableVariableType = "file"
)

// Defines values for RepositoryVisibility.
const (
	RepositoryVisibilityPrivate RepositoryVisibility = "private"
	RepositoryVisibilityPublic  RepositoryVisibility = "public"
)

// Defines values for RepositoryDetailsVisibility.
const (
	RepositoryDetailsVisibilityPrivate RepositoryDetailsVisibility = "private"
	RepositoryDetailsVisibilityPublic  RepositoryDetailsVisibility = "public"
)

// Defines values for InvalidateCacheParamsEndpoint.
const (
	Branches      InvalidateCacheParamsEndpoint = "branches"
	Organizations InvalidateCacheParamsEndpoint = "organizations"
	Repositories  InvalidateCacheParamsEndpoint = "repositories"
)

// Branch defines model for Branch.
type Branch struct {
	Name string `json:"name"`
}

// BranchesResponse defines model for BranchesResponse.
type BranchesResponse struct {
	Data []Branch `json:"data"`
}

// CacheInvalidationResponse defines model for CacheInvalidationResponse.
type CacheInvalidationResponse struct {
	// Endpoint The endpoint for which cache was invalidated
	Endpoint string `json:"endpoint"`

	// Message A message indicating the result of the cache invalidation
	Message string `json:"message"`
}

// Error defines model for Error.
type Error struct {
	// Code A short error code representing the type of error
	Code string `json:"code"`

	// Message A human-readable message providing more details about the error
	Message string `json:"message"`
}

// Organization defines model for Organization.
type Organization struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Id        string  `json:"id"`
	Name      string  `json:"name"`
}

// OrganizationsResponse defines model for OrganizationsResponse.
type OrganizationsResponse struct {
	Data []Organization `json:"data"`
}

// Owner defines model for Owner.
type Owner struct {
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Id        string  `json:"id"`
	Name      string  `json:"name"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	Total int `json:"total"`
}

// PipelineResponse defines model for PipelineResponse.
type PipelineResponse struct {
	// Id Pipeline ID
	Id int `json:"id"`

	// Ref Branch/tag/commit used
	Ref string `json:"ref"`

	// Sha Commit SHA
	Sha *string `json:"sha,omitempty"`

	// Status Pipeline status
	Status string `json:"status"`

	// WebUrl URL to view pipeline in GitLab UI
	WebUrl string `json:"web_url"`
}

// PipelineVariable defines model for PipelineVariable.
type PipelineVariable struct {
	// Key Variable name
	Key string `json:"key"`

	// Value Variable value
	Value string `json:"value"`

	// VariableType Type of variable
	VariableType *PipelineVariableVariableType `json:"variable_type,omitempty"`
}

// PipelineVariableVariableType Type of variable
type PipelineVariableVariableType string

// RepositoriesResponse defines model for RepositoriesResponse.
type RepositoriesResponse struct {
	Data []Repository `json:"data"`
}

// Repository defines model for Repository.
type Repository struct {
	DefaultBranch *string               `json:"default_branch,omitempty"`
	Description   *string               `json:"description,omitempty"`
	Id            string                `json:"id"`
	Name          string                `json:"name"`
	Owner         *string               `json:"owner,omitempty"`
	Url           *string               `json:"url,omitempty"`
	Visibility    *RepositoryVisibility `json:"visibility,omitempty"`
}

// RepositoryVisibility defines model for Repository.Visibility.
type RepositoryVisibility string

// RepositoryDetails defines model for RepositoryDetails.
type RepositoryDetails struct {
	CreatedAt     *time.Time                   `json:"created_at,omitempty"`
	DefaultBranch *string                      `json:"default_branch,omitempty"`
	Description   *string                      `json:"description,omitempty"`
	ForksCount    *int                         `json:"forks_count,omitempty"`
	HttpUrl       *string                      `json:"http_url,omitempty"`
	Id            string                       `json:"id"`
	Name          string                       `json:"name"`
	Owner         *Owner                       `json:"owner,omitempty"`
	SshUrl        *string                      `json:"ssh_url,omitempty"`
	StarsCount    *int                         `json:"stars_count,omitempty"`
	Url           *string                      `json:"url,omitempty"`
	Visibility    *RepositoryDetailsVisibility `json:"visibility,omitempty"`
}

// RepositoryDetailsVisibility defines model for RepositoryDetails.Visibility.
type RepositoryDetailsVisibility string

// GitServerParam defines model for gitServerParam.
type GitServerParam = string

// RepoNameParam defines model for repoNameParam.
type RepoNameParam = string

// RepoNameQueryParam defines model for repoNameQueryParam.
type RepoNameQueryParam = string

// RepoOwnerParam defines model for repoOwnerParam.
type RepoOwnerParam = string

// ListBranchesParams defines parameters for ListBranches.
type ListBranchesParams struct {
	// GitServer The Git server name.
	GitServer GitServerParam `form:"gitServer" json:"gitServer"`

	// Owner The owner of the repository.
	Owner RepoOwnerParam `form:"owner" json:"owner"`

	// RepoName The name of the repository.
	RepoName RepoNameParam `form:"repoName" json:"repoName"`
}

// InvalidateCacheParams defines parameters for InvalidateCache.
type InvalidateCacheParams struct {
	// Endpoint The endpoint name to invalidate cache for (repositories, organizations, branches)
	Endpoint InvalidateCacheParamsEndpoint `form:"endpoint" json:"endpoint"`
}

// InvalidateCacheParamsEndpoint defines parameters for InvalidateCache.
type InvalidateCacheParamsEndpoint string

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {
	// GitServer The Git server name.
	GitServer GitServerParam `form:"gitServer" json:"gitServer"`

	// Owner The owner of the repository.
	Owner RepoOwnerParam `form:"owner" json:"owner"`

	// RepoName The name of the repository to search for.
	RepoName *RepoNameQueryParam `form:"repoName,omitempty" json:"repoName,omitempty"`
}

// GetRepositoryParams defines parameters for GetRepository.
type GetRepositoryParams struct {
	// GitServer The Git server name.
	GitServer GitServerParam `form:"gitServer" json:"gitServer"`

	// Owner The owner of the repository.
	Owner RepoOwnerParam `form:"owner" json:"owner"`

	// RepoName The name of the repository.
	RepoName RepoNameParam `form:"repoName" json:"repoName"`
}

// TriggerPipelineParams defines parameters for TriggerPipeline.
type TriggerPipelineParams struct {
	// GitServer The Git server name.
	GitServer GitServerParam `form:"gitServer" json:"gitServer"`

	// Project Project path (e.g., "epmd-edp/temp/sk-test")
	Project string `form:"project" json:"project"`

	// Ref Branch/tag/commit (e.g., "main")
	Ref string `form:"ref" json:"ref"`

	// Variables JSON array of pipeline variables
	Variables *string `form:"variables,omitempty" json:"variables,omitempty"`
}

// ListUserOrganizationsParams defines parameters for ListUserOrganizations.
type ListUserOrganizationsParams struct {
	// GitServer The Git server name.
	GitServer GitServerParam `form:"gitServer" json:"gitServer"`
}
