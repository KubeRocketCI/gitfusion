// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	. "github.com/KubeRocketCI/gitfusion/internal/models"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get detailed information for a specific GitHub repository
	// (GET /api/v1/providers/github/{git-server}/repositories/{owner}/{repo})
	GetGitHubRepository(w http.ResponseWriter, r *http.Request, gitServer string, owner string, repo string)
	// List organization repositories
	// (GET /api/v1/providers/github/{git-server}/{org}/repositories)
	ListGitHubRepositories(w http.ResponseWriter, r *http.Request, gitServer string, org string, params ListGitHubRepositoriesParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get detailed information for a specific GitHub repository
// (GET /api/v1/providers/github/{git-server}/repositories/{owner}/{repo})
func (_ Unimplemented) GetGitHubRepository(w http.ResponseWriter, r *http.Request, gitServer string, owner string, repo string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List organization repositories
// (GET /api/v1/providers/github/{git-server}/{org}/repositories)
func (_ Unimplemented) ListGitHubRepositories(w http.ResponseWriter, r *http.Request, gitServer string, org string, params ListGitHubRepositoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetGitHubRepository operation middleware
func (siw *ServerInterfaceWrapper) GetGitHubRepository(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "git-server" -------------
	var gitServer string

	err = runtime.BindStyledParameterWithOptions("simple", "git-server", chi.URLParam(r, "git-server"), &gitServer, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "git-server", Err: err})
		return
	}

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", chi.URLParam(r, "owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameterWithOptions("simple", "repo", chi.URLParam(r, "repo"), &repo, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repo", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGitHubRepository(w, r, gitServer, owner, repo)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListGitHubRepositories operation middleware
func (siw *ServerInterfaceWrapper) ListGitHubRepositories(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "git-server" -------------
	var gitServer string

	err = runtime.BindStyledParameterWithOptions("simple", "git-server", chi.URLParam(r, "git-server"), &gitServer, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "git-server", Err: err})
		return
	}

	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameterWithOptions("simple", "org", chi.URLParam(r, "org"), &org, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "org", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGitHubRepositoriesParams

	// ------------- Optional query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagination", r.URL.Query(), &params.Pagination)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagination", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGitHubRepositories(w, r, gitServer, org, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/github/{git-server}/repositories/{owner}/{repo}", wrapper.GetGitHubRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/github/{git-server}/{org}/repositories", wrapper.ListGitHubRepositories)
	})

	return r
}

type GetGitHubRepositoryRequestObject struct {
	GitServer string `json:"git-server"`
	Owner     string `json:"owner"`
	Repo      string `json:"repo"`
}

type GetGitHubRepositoryResponseObject interface {
	VisitGetGitHubRepositoryResponse(w http.ResponseWriter) error
}

type GetGitHubRepository200JSONResponse Repository

func (response GetGitHubRepository200JSONResponse) VisitGetGitHubRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGitHubRepository400JSONResponse Error

func (response GetGitHubRepository400JSONResponse) VisitGetGitHubRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGitHubRepository404JSONResponse Error

func (response GetGitHubRepository404JSONResponse) VisitGetGitHubRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListGitHubRepositoriesRequestObject struct {
	GitServer string `json:"git-server"`
	Org       string `json:"org"`
	Params    ListGitHubRepositoriesParams
}

type ListGitHubRepositoriesResponseObject interface {
	VisitListGitHubRepositoriesResponse(w http.ResponseWriter) error
}

type ListGitHubRepositories200JSONResponse RepositoriesResponse

func (response ListGitHubRepositories200JSONResponse) VisitListGitHubRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGitHubRepositories400JSONResponse Error

func (response ListGitHubRepositories400JSONResponse) VisitListGitHubRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get detailed information for a specific GitHub repository
	// (GET /api/v1/providers/github/{git-server}/repositories/{owner}/{repo})
	GetGitHubRepository(ctx context.Context, request GetGitHubRepositoryRequestObject) (GetGitHubRepositoryResponseObject, error)
	// List organization repositories
	// (GET /api/v1/providers/github/{git-server}/{org}/repositories)
	ListGitHubRepositories(ctx context.Context, request ListGitHubRepositoriesRequestObject) (ListGitHubRepositoriesResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetGitHubRepository operation middleware
func (sh *strictHandler) GetGitHubRepository(w http.ResponseWriter, r *http.Request, gitServer string, owner string, repo string) {
	var request GetGitHubRepositoryRequestObject

	request.GitServer = gitServer
	request.Owner = owner
	request.Repo = repo

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGitHubRepository(ctx, request.(GetGitHubRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGitHubRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGitHubRepositoryResponseObject); ok {
		if err := validResponse.VisitGetGitHubRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListGitHubRepositories operation middleware
func (sh *strictHandler) ListGitHubRepositories(w http.ResponseWriter, r *http.Request, gitServer string, org string, params ListGitHubRepositoriesParams) {
	var request ListGitHubRepositoriesRequestObject

	request.GitServer = gitServer
	request.Org = org
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListGitHubRepositories(ctx, request.(ListGitHubRepositoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGitHubRepositories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListGitHubRepositoriesResponseObject); ok {
		if err := validResponse.VisitListGitHubRepositoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
